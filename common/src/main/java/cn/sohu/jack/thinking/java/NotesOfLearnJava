第一章 对象导论
1、我们将问题空间的元素以及其在解空间的表示称为 对象
2、类实际上就是数据类型
3、设计难点：问题空间的元素和解空间的对象创建一对一的关系
4、UML图 统一建模类型
5、当你开发一个程序设计是，最好的方法是把对象当作 “服务提供者”
6、高内聚是软件设计的基本质量要求之一
7、访问控制 （1）可以让客户端程序员无法触及隐藏的部分；（2）可以让库设计者可以任意调整后 台程序设计而不影响客户端的使用；
8、projected与private作用相当，projected 只是在继承中可以被引用
9、一个非面向对象编程的编译器产生的函数调用运用前期绑定，编译器将会产生对一个具体函数名字的调用，运行时将这个调用解析到将要被执行代码的绝对地址
     面向对象编程使用了后期绑定，当向对象发送消息时，被调用的代码直到运行时才能确定。编译器确认调用方法的存在，检查调用参数和返回值的类型。******特殊代码使用在对象中存储的信息来计算方法体的地址****** java中方法的动态绑定时默认的

10、容器选择：（1）不同的容器提供了不同的接口和外部行为
                           (2) 不同的容器执行某些操作时会有不同的效率
11、堆中动态管理存储空间，在运行时需要对象才去分配空间，而不是编译时在堆栈中创建对象，分配内存可能比创建对象更耗时！
12、垃圾回收器提供了更高层的保障，避免了内存泄漏问题（Wikipedia 内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费）

第二章 一切都是对象
1、存储数据的地方：寄存器，堆栈，堆，常量存储，非RAM存储
    堆栈：位于通用RAM；指针下移分配新的内存，上移释放内存 创建程序时，Java系统必须知道存储在堆栈中所有项的生命周期，限制了语言的灵活性，某些java数据存储在对象中--特别时对象引用 Java对象不存在其中
存储基本类型（变量直接存储值）
    堆：通用的内存池，存放所有的Java对象
    非RAM存储：流对象和持久化对象
2、若返回值为空，则return 的作用就是用来退出方法而已
3、static 解决了只想为某特定域分配单一内存空间；而不去关注究竟要创建多少对象。
                 方法不与关联它的对象实例产生关系，没有创建对象，也能调用这个方法
4、javadoc 文档格式化工具
5、自动包装器对基本类型和包装器类型自动装箱

第三章 操作符
1、System.out.println*() 这种特定上下文环境中 String类型的 + 操作连接，意味着”字符串连接“，会自动将非String的转化为 String
2、基本类型赋值是存储了实际的数值，而并非指向一个对象的引用，为其赋值的时候是直接将一个数从一个地方复制到另外一个地方，
3、如果在应当使用String值的地方使用了布尔值，则boolean类型的值会相应的转变为文本类型
4、按位操作符 (&) 两个输入位都是1，则输出1 否则输出0；按位操作符（|）有一个是1 输出1，按位异或(^) 其中一个是1，但不全是1则输出1 按位非 取反操作。可以和=号联合操作，&=, |=, ^= 都是合法的
5、<<有符号左移 >>有符号右移（右移时符号为-时，高位补1）
6、三元操作符 if-else boolean-exp?value1:value2
7、类型转换运算符允许我们显式地进行这种类型转化；但窄化转化是不被允许的，除布尔型的基本类型都能进行类型转化

第四章 控制执行流程
1、重载表示相同的方法名可以具有不同的参数列表
2、如果方法是void的，那么方法体内就会相应有一个隐式的return，所以不是所有的方法都要写return
3、