5【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。
 正例:MAX_STOCK_COUNT
 反例:MAX_COUNT

6 抽象类命名使用 Abstract 或 Base 开头;异常类命名使用 Exception 结尾;测试类 命名以它要测试的类名开始，以 Test 结尾
7. 【强制】类型与中括号紧挨相连来定义数组。
 正例:定义整形数组 int[] arrayDemo;
 反例:在 main 参数中，使用 String args[]来定义。
8. 【强制】POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。
12. 【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。
13.【推荐】接口类中的方法和属性不要加任何修饰符号(public 也不要加)，保持代码的简洁 性，并加上有效的 Javadoc 注释。
    尽量不要在接口里定义变量，如果一定要定义变量，肯定是 与接口方法相关，并且是整个应用的基础常量。

14. 1)【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部
            的实现类用 Impl 的后缀与接口区别。
            正例:CacheServiceImpl 实现 CacheService 接口
    2)【推荐】 如果是形容能力的接口名称，取对应的形容词为接口名(通常是–able 的形式)。 正例:AbstractTranslator 实现 Translatable。
15. 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成
       本，直接用类名来访问即可
     所有的覆写方法，必须加@Override 注解
7. 【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。
    说明:对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在 IntegerCache.cache 产生，会复用已有对象，
    这个区间内的 Integer 值可以直接使用==进行 判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，
    推荐使用 equals 方法进行判断。

    POJO是Plain OrdinaryJava Object的缩写，但是它通指没有使用Entity Beans的普通java对象，可以把POJO作为支持业务逻辑的协助类
    NPE 风险  java.lang.NullPointerException
8.类内方法定义的顺序依次是:公有方法或保护方法 > 私有方法 > getter/setter
  方法